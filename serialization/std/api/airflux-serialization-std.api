public final class io/github/airflux/serialization/std/reader/BigDecimalReaderKt {
	public static final fun bigDecimalReader ()Lio/github/airflux/serialization/core/reader/JsReader;
}

public final class io/github/airflux/serialization/std/reader/BooleanReaderKt {
	public static final fun booleanReader ()Lio/github/airflux/serialization/core/reader/JsReader;
}

public final class io/github/airflux/serialization/std/reader/ByteReaderKt {
	public static final fun byteReader ()Lio/github/airflux/serialization/core/reader/JsReader;
}

public final class io/github/airflux/serialization/std/reader/IntReaderKt {
	public static final fun intReader ()Lio/github/airflux/serialization/core/reader/JsReader;
}

public final class io/github/airflux/serialization/std/reader/LongReaderKt {
	public static final fun longReader ()Lio/github/airflux/serialization/core/reader/JsReader;
}

public final class io/github/airflux/serialization/std/reader/ShortReaderKt {
	public static final fun shortReader ()Lio/github/airflux/serialization/core/reader/JsReader;
}

public final class io/github/airflux/serialization/std/reader/StringReaderKt {
	public static final fun stringReader ()Lio/github/airflux/serialization/core/reader/JsReader;
}

public final class io/github/airflux/serialization/std/validator/array/IsNotEmptyArrayValidator : io/github/airflux/serialization/dsl/reader/array/validator/ArrayValidator {
	public fun validate (Lio/github/airflux/serialization/core/reader/env/JsReaderEnv;Ljava/lang/Object;Lio/github/airflux/serialization/core/location/JsLocation;Lio/github/airflux/serialization/core/value/JsArray;)Lio/github/airflux/serialization/core/reader/validation/ValidationResult;
}

public abstract interface class io/github/airflux/serialization/std/validator/array/IsNotEmptyArrayValidator$ErrorBuilder {
	public abstract fun isNotEmptyArrayError ()Lio/github/airflux/serialization/core/reader/result/ReadingResult$Error;
}

public final class io/github/airflux/serialization/std/validator/array/MaxItemsArrayValidator : io/github/airflux/serialization/dsl/reader/array/validator/ArrayValidator {
	public fun validate (Lio/github/airflux/serialization/core/reader/env/JsReaderEnv;Ljava/lang/Object;Lio/github/airflux/serialization/core/location/JsLocation;Lio/github/airflux/serialization/core/value/JsArray;)Lio/github/airflux/serialization/core/reader/validation/ValidationResult;
}

public abstract interface class io/github/airflux/serialization/std/validator/array/MaxItemsArrayValidator$ErrorBuilder {
	public abstract fun maxItemsArrayError (II)Lio/github/airflux/serialization/core/reader/result/ReadingResult$Error;
}

public final class io/github/airflux/serialization/std/validator/array/MinItemsArrayValidator : io/github/airflux/serialization/dsl/reader/array/validator/ArrayValidator {
	public fun validate (Lio/github/airflux/serialization/core/reader/env/JsReaderEnv;Ljava/lang/Object;Lio/github/airflux/serialization/core/location/JsLocation;Lio/github/airflux/serialization/core/value/JsArray;)Lio/github/airflux/serialization/core/reader/validation/ValidationResult;
}

public abstract interface class io/github/airflux/serialization/std/validator/array/MinItemsArrayValidator$ErrorBuilder {
	public abstract fun minItemsArrayError (II)Lio/github/airflux/serialization/core/reader/result/ReadingResult$Error;
}

public final class io/github/airflux/serialization/std/validator/array/StdArrayValidator {
	public static final field INSTANCE Lio/github/airflux/serialization/std/validator/array/StdArrayValidator;
	public final fun isNotEmpty ()Lio/github/airflux/serialization/dsl/reader/array/validator/ArrayValidatorBuilder;
	public final fun maxItems (I)Lio/github/airflux/serialization/dsl/reader/array/validator/ArrayValidatorBuilder;
	public final fun minItems (I)Lio/github/airflux/serialization/dsl/reader/array/validator/ArrayValidatorBuilder;
}

public final class io/github/airflux/serialization/std/validator/condition/ConditionValidatorsKt {
	public static final fun applyIf (Lio/github/airflux/serialization/core/reader/validation/JsValidator;Lkotlin/jvm/functions/Function4;)Lio/github/airflux/serialization/core/reader/validation/JsValidator;
	public static final fun applyIfNotNull (Lio/github/airflux/serialization/core/reader/validation/JsValidator;)Lio/github/airflux/serialization/core/reader/validation/JsValidator;
}

public final class io/github/airflux/serialization/std/validator/number/ExclusiveMaximumNumberValidator : io/github/airflux/serialization/core/reader/validation/JsValidator {
	public fun validate (Lio/github/airflux/serialization/core/reader/env/JsReaderEnv;Ljava/lang/Object;Lio/github/airflux/serialization/core/location/JsLocation;Ljava/lang/Number;)Lio/github/airflux/serialization/core/reader/validation/ValidationResult;
	public synthetic fun validate (Lio/github/airflux/serialization/core/reader/env/JsReaderEnv;Ljava/lang/Object;Lio/github/airflux/serialization/core/location/JsLocation;Ljava/lang/Object;)Lio/github/airflux/serialization/core/reader/validation/ValidationResult;
}

public abstract interface class io/github/airflux/serialization/std/validator/number/ExclusiveMaximumNumberValidator$ErrorBuilder {
	public abstract fun exclusiveMaximumNumberError (Ljava/lang/Number;Ljava/lang/Number;)Lio/github/airflux/serialization/core/reader/result/ReadingResult$Error;
}

public final class io/github/airflux/serialization/std/validator/number/ExclusiveMinimumNumberValidator : io/github/airflux/serialization/core/reader/validation/JsValidator {
	public fun validate (Lio/github/airflux/serialization/core/reader/env/JsReaderEnv;Ljava/lang/Object;Lio/github/airflux/serialization/core/location/JsLocation;Ljava/lang/Number;)Lio/github/airflux/serialization/core/reader/validation/ValidationResult;
	public synthetic fun validate (Lio/github/airflux/serialization/core/reader/env/JsReaderEnv;Ljava/lang/Object;Lio/github/airflux/serialization/core/location/JsLocation;Ljava/lang/Object;)Lio/github/airflux/serialization/core/reader/validation/ValidationResult;
}

public abstract interface class io/github/airflux/serialization/std/validator/number/ExclusiveMinimumNumberValidator$ErrorBuilder {
	public abstract fun exclusiveMinimumNumberError (Ljava/lang/Number;Ljava/lang/Number;)Lio/github/airflux/serialization/core/reader/result/ReadingResult$Error;
}

public final class io/github/airflux/serialization/std/validator/number/MaximumNumberValidator : io/github/airflux/serialization/core/reader/validation/JsValidator {
	public fun validate (Lio/github/airflux/serialization/core/reader/env/JsReaderEnv;Ljava/lang/Object;Lio/github/airflux/serialization/core/location/JsLocation;Ljava/lang/Number;)Lio/github/airflux/serialization/core/reader/validation/ValidationResult;
	public synthetic fun validate (Lio/github/airflux/serialization/core/reader/env/JsReaderEnv;Ljava/lang/Object;Lio/github/airflux/serialization/core/location/JsLocation;Ljava/lang/Object;)Lio/github/airflux/serialization/core/reader/validation/ValidationResult;
}

public abstract interface class io/github/airflux/serialization/std/validator/number/MaximumNumberValidator$ErrorBuilder {
	public abstract fun maximumNumberError (Ljava/lang/Number;Ljava/lang/Number;)Lio/github/airflux/serialization/core/reader/result/ReadingResult$Error;
}

public final class io/github/airflux/serialization/std/validator/number/MinimumNumberValidator : io/github/airflux/serialization/core/reader/validation/JsValidator {
	public fun validate (Lio/github/airflux/serialization/core/reader/env/JsReaderEnv;Ljava/lang/Object;Lio/github/airflux/serialization/core/location/JsLocation;Ljava/lang/Number;)Lio/github/airflux/serialization/core/reader/validation/ValidationResult;
	public synthetic fun validate (Lio/github/airflux/serialization/core/reader/env/JsReaderEnv;Ljava/lang/Object;Lio/github/airflux/serialization/core/location/JsLocation;Ljava/lang/Object;)Lio/github/airflux/serialization/core/reader/validation/ValidationResult;
}

public abstract interface class io/github/airflux/serialization/std/validator/number/MinimumNumberValidator$ErrorBuilder {
	public abstract fun minimumNumberError (Ljava/lang/Number;Ljava/lang/Number;)Lio/github/airflux/serialization/core/reader/result/ReadingResult$Error;
}

public final class io/github/airflux/serialization/std/validator/number/StdNumberValidator {
	public static final field INSTANCE Lio/github/airflux/serialization/std/validator/number/StdNumberValidator;
	public final fun exclusiveMaximum (Ljava/lang/Number;)Lio/github/airflux/serialization/core/reader/validation/JsValidator;
	public final fun exclusiveMinimum (Ljava/lang/Number;)Lio/github/airflux/serialization/core/reader/validation/JsValidator;
	public final fun maximum (Ljava/lang/Number;)Lio/github/airflux/serialization/core/reader/validation/JsValidator;
	public final fun minimum (Ljava/lang/Number;)Lio/github/airflux/serialization/core/reader/validation/JsValidator;
}

public final class io/github/airflux/serialization/std/validator/property/ForbiddenPropertyValidator : io/github/airflux/serialization/core/reader/validation/JsValidator {
	public fun validate (Lio/github/airflux/serialization/core/reader/env/JsReaderEnv;Ljava/lang/Object;Lio/github/airflux/serialization/core/location/JsLocation;Ljava/lang/Object;)Lio/github/airflux/serialization/core/reader/validation/ValidationResult;
}

public abstract interface class io/github/airflux/serialization/std/validator/property/ForbiddenPropertyValidator$ErrorBuilder {
	public abstract fun forbiddenPropertyError ()Lio/github/airflux/serialization/core/reader/result/ReadingResult$Error;
}

public final class io/github/airflux/serialization/std/validator/property/MandatoryPropertyValidator : io/github/airflux/serialization/core/reader/validation/JsValidator {
	public fun validate (Lio/github/airflux/serialization/core/reader/env/JsReaderEnv;Ljava/lang/Object;Lio/github/airflux/serialization/core/location/JsLocation;Ljava/lang/Object;)Lio/github/airflux/serialization/core/reader/validation/ValidationResult;
}

public abstract interface class io/github/airflux/serialization/std/validator/property/MandatoryPropertyValidator$ErrorBuilder {
	public abstract fun mandatoryPropertyError ()Lio/github/airflux/serialization/core/reader/result/ReadingResult$Error;
}

public final class io/github/airflux/serialization/std/validator/property/StdPropertyValidator {
	public static final field INSTANCE Lio/github/airflux/serialization/std/validator/property/StdPropertyValidator;
	public final fun forbidden (Lkotlin/jvm/functions/Function3;)Lio/github/airflux/serialization/core/reader/validation/JsValidator;
	public final fun mandatory (Lkotlin/jvm/functions/Function3;)Lio/github/airflux/serialization/core/reader/validation/JsValidator;
}

public final class io/github/airflux/serialization/std/validator/string/IsAStringValidator : io/github/airflux/serialization/core/reader/validation/JsValidator {
	public synthetic fun validate (Lio/github/airflux/serialization/core/reader/env/JsReaderEnv;Ljava/lang/Object;Lio/github/airflux/serialization/core/location/JsLocation;Ljava/lang/Object;)Lio/github/airflux/serialization/core/reader/validation/ValidationResult;
	public fun validate (Lio/github/airflux/serialization/core/reader/env/JsReaderEnv;Ljava/lang/Object;Lio/github/airflux/serialization/core/location/JsLocation;Ljava/lang/String;)Lio/github/airflux/serialization/core/reader/validation/ValidationResult;
}

public abstract interface class io/github/airflux/serialization/std/validator/string/IsAStringValidator$ErrorBuilder {
	public abstract fun isAStringError (Ljava/lang/String;)Lio/github/airflux/serialization/core/reader/result/ReadingResult$Error;
}

public final class io/github/airflux/serialization/std/validator/string/IsNotBlankStringValidator : io/github/airflux/serialization/core/reader/validation/JsValidator {
	public synthetic fun validate (Lio/github/airflux/serialization/core/reader/env/JsReaderEnv;Ljava/lang/Object;Lio/github/airflux/serialization/core/location/JsLocation;Ljava/lang/Object;)Lio/github/airflux/serialization/core/reader/validation/ValidationResult;
	public fun validate (Lio/github/airflux/serialization/core/reader/env/JsReaderEnv;Ljava/lang/Object;Lio/github/airflux/serialization/core/location/JsLocation;Ljava/lang/String;)Lio/github/airflux/serialization/core/reader/validation/ValidationResult;
}

public abstract interface class io/github/airflux/serialization/std/validator/string/IsNotBlankStringValidator$ErrorBuilder {
	public abstract fun isNotBlankStringError ()Lio/github/airflux/serialization/core/reader/result/ReadingResult$Error;
}

public final class io/github/airflux/serialization/std/validator/string/IsNotEmptyStringValidator : io/github/airflux/serialization/core/reader/validation/JsValidator {
	public synthetic fun validate (Lio/github/airflux/serialization/core/reader/env/JsReaderEnv;Ljava/lang/Object;Lio/github/airflux/serialization/core/location/JsLocation;Ljava/lang/Object;)Lio/github/airflux/serialization/core/reader/validation/ValidationResult;
	public fun validate (Lio/github/airflux/serialization/core/reader/env/JsReaderEnv;Ljava/lang/Object;Lio/github/airflux/serialization/core/location/JsLocation;Ljava/lang/String;)Lio/github/airflux/serialization/core/reader/validation/ValidationResult;
}

public abstract interface class io/github/airflux/serialization/std/validator/string/IsNotEmptyStringValidator$ErrorBuilder {
	public abstract fun isNotEmptyStringError ()Lio/github/airflux/serialization/core/reader/result/ReadingResult$Error;
}

public final class io/github/airflux/serialization/std/validator/string/MaxLengthStringValidator : io/github/airflux/serialization/core/reader/validation/JsValidator {
	public synthetic fun validate (Lio/github/airflux/serialization/core/reader/env/JsReaderEnv;Ljava/lang/Object;Lio/github/airflux/serialization/core/location/JsLocation;Ljava/lang/Object;)Lio/github/airflux/serialization/core/reader/validation/ValidationResult;
	public fun validate (Lio/github/airflux/serialization/core/reader/env/JsReaderEnv;Ljava/lang/Object;Lio/github/airflux/serialization/core/location/JsLocation;Ljava/lang/String;)Lio/github/airflux/serialization/core/reader/validation/ValidationResult;
}

public abstract interface class io/github/airflux/serialization/std/validator/string/MaxLengthStringValidator$ErrorBuilder {
	public abstract fun maxLengthStringError (II)Lio/github/airflux/serialization/core/reader/result/ReadingResult$Error;
}

public final class io/github/airflux/serialization/std/validator/string/MinLengthStringValidator : io/github/airflux/serialization/core/reader/validation/JsValidator {
	public synthetic fun validate (Lio/github/airflux/serialization/core/reader/env/JsReaderEnv;Ljava/lang/Object;Lio/github/airflux/serialization/core/location/JsLocation;Ljava/lang/Object;)Lio/github/airflux/serialization/core/reader/validation/ValidationResult;
	public fun validate (Lio/github/airflux/serialization/core/reader/env/JsReaderEnv;Ljava/lang/Object;Lio/github/airflux/serialization/core/location/JsLocation;Ljava/lang/String;)Lio/github/airflux/serialization/core/reader/validation/ValidationResult;
}

public abstract interface class io/github/airflux/serialization/std/validator/string/MinLengthStringValidator$ErrorBuilder {
	public abstract fun minLengthStringError (II)Lio/github/airflux/serialization/core/reader/result/ReadingResult$Error;
}

public final class io/github/airflux/serialization/std/validator/string/PatternStringValidator : io/github/airflux/serialization/core/reader/validation/JsValidator {
	public synthetic fun validate (Lio/github/airflux/serialization/core/reader/env/JsReaderEnv;Ljava/lang/Object;Lio/github/airflux/serialization/core/location/JsLocation;Ljava/lang/Object;)Lio/github/airflux/serialization/core/reader/validation/ValidationResult;
	public fun validate (Lio/github/airflux/serialization/core/reader/env/JsReaderEnv;Ljava/lang/Object;Lio/github/airflux/serialization/core/location/JsLocation;Ljava/lang/String;)Lio/github/airflux/serialization/core/reader/validation/ValidationResult;
}

public abstract interface class io/github/airflux/serialization/std/validator/string/PatternStringValidator$ErrorBuilder {
	public abstract fun patternStringError (Ljava/lang/String;Lkotlin/text/Regex;)Lio/github/airflux/serialization/core/reader/result/ReadingResult$Error;
}

public final class io/github/airflux/serialization/std/validator/string/StdStringValidator {
	public static final field INSTANCE Lio/github/airflux/serialization/std/validator/string/StdStringValidator;
	public final fun isA (Lkotlin/jvm/functions/Function1;)Lio/github/airflux/serialization/core/reader/validation/JsValidator;
	public final fun isNotBlank ()Lio/github/airflux/serialization/core/reader/validation/JsValidator;
	public final fun isNotEmpty ()Lio/github/airflux/serialization/core/reader/validation/JsValidator;
	public final fun maxLength (I)Lio/github/airflux/serialization/core/reader/validation/JsValidator;
	public final fun minLength (I)Lio/github/airflux/serialization/core/reader/validation/JsValidator;
	public final fun pattern (Lkotlin/text/Regex;)Lio/github/airflux/serialization/core/reader/validation/JsValidator;
}

public final class io/github/airflux/serialization/std/validator/struct/AdditionalPropertiesStructValidator : io/github/airflux/serialization/dsl/reader/struct/validator/StructValidator {
	public fun validate (Lio/github/airflux/serialization/core/reader/env/JsReaderEnv;Ljava/lang/Object;Lio/github/airflux/serialization/core/location/JsLocation;Ljava/util/List;Lio/github/airflux/serialization/core/value/JsStruct;)Lio/github/airflux/serialization/core/reader/validation/ValidationResult;
}

public abstract interface class io/github/airflux/serialization/std/validator/struct/AdditionalPropertiesStructValidator$ErrorBuilder {
	public abstract fun additionalPropertiesStructError ()Lio/github/airflux/serialization/core/reader/result/ReadingResult$Error;
}

public final class io/github/airflux/serialization/std/validator/struct/IsNotEmptyStructValidator : io/github/airflux/serialization/dsl/reader/struct/validator/StructValidator {
	public fun validate (Lio/github/airflux/serialization/core/reader/env/JsReaderEnv;Ljava/lang/Object;Lio/github/airflux/serialization/core/location/JsLocation;Ljava/util/List;Lio/github/airflux/serialization/core/value/JsStruct;)Lio/github/airflux/serialization/core/reader/validation/ValidationResult;
}

public abstract interface class io/github/airflux/serialization/std/validator/struct/IsNotEmptyStructValidator$ErrorBuilder {
	public abstract fun isNotEmptyStructError ()Lio/github/airflux/serialization/core/reader/result/ReadingResult$Error;
}

public final class io/github/airflux/serialization/std/validator/struct/MaxPropertiesStructValidator : io/github/airflux/serialization/dsl/reader/struct/validator/StructValidator {
	public fun validate (Lio/github/airflux/serialization/core/reader/env/JsReaderEnv;Ljava/lang/Object;Lio/github/airflux/serialization/core/location/JsLocation;Ljava/util/List;Lio/github/airflux/serialization/core/value/JsStruct;)Lio/github/airflux/serialization/core/reader/validation/ValidationResult;
}

public abstract interface class io/github/airflux/serialization/std/validator/struct/MaxPropertiesStructValidator$ErrorBuilder {
	public abstract fun maxPropertiesStructError (II)Lio/github/airflux/serialization/core/reader/result/ReadingResult$Error;
}

public final class io/github/airflux/serialization/std/validator/struct/MinPropertiesStructValidator : io/github/airflux/serialization/dsl/reader/struct/validator/StructValidator {
	public fun validate (Lio/github/airflux/serialization/core/reader/env/JsReaderEnv;Ljava/lang/Object;Lio/github/airflux/serialization/core/location/JsLocation;Ljava/util/List;Lio/github/airflux/serialization/core/value/JsStruct;)Lio/github/airflux/serialization/core/reader/validation/ValidationResult;
}

public abstract interface class io/github/airflux/serialization/std/validator/struct/MinPropertiesStructValidator$ErrorBuilder {
	public abstract fun minPropertiesStructError (II)Lio/github/airflux/serialization/core/reader/result/ReadingResult$Error;
}

public final class io/github/airflux/serialization/std/validator/struct/StdStructValidator {
	public static final field INSTANCE Lio/github/airflux/serialization/std/validator/struct/StdStructValidator;
	public final fun additionalProperties ()Lio/github/airflux/serialization/dsl/reader/struct/validator/StructValidatorBuilder;
	public final fun isNotEmpty ()Lio/github/airflux/serialization/dsl/reader/struct/validator/StructValidatorBuilder;
	public final fun maxProperties (I)Lio/github/airflux/serialization/dsl/reader/struct/validator/StructValidatorBuilder;
	public final fun minProperties (I)Lio/github/airflux/serialization/dsl/reader/struct/validator/StructValidatorBuilder;
}

public final class io/github/airflux/serialization/std/writer/BigDecimalWriterKt {
	public static final fun bigDecimalWriter (Z)Lio/github/airflux/serialization/core/writer/JsWriter;
}

public final class io/github/airflux/serialization/std/writer/BooleanWriterKt {
	public static final fun booleanWriter ()Lio/github/airflux/serialization/core/writer/JsWriter;
}

public final class io/github/airflux/serialization/std/writer/ByteWriterKt {
	public static final fun byteWriter ()Lio/github/airflux/serialization/core/writer/JsWriter;
}

public final class io/github/airflux/serialization/std/writer/IntWriterKt {
	public static final fun intWriter ()Lio/github/airflux/serialization/core/writer/JsWriter;
}

public final class io/github/airflux/serialization/std/writer/LongWriterKt {
	public static final fun longWriter ()Lio/github/airflux/serialization/core/writer/JsWriter;
}

public final class io/github/airflux/serialization/std/writer/ShortWriterKt {
	public static final fun shortWriter ()Lio/github/airflux/serialization/core/writer/JsWriter;
}

public final class io/github/airflux/serialization/std/writer/StringWriterKt {
	public static final fun stringWriter ()Lio/github/airflux/serialization/core/writer/JsWriter;
}

